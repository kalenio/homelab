#: https://sw.kovidgoyal.net/kitty/conf/ ------------------------------

## Root Loops color scheme
## via https://rootloops.sh

# The basic colors
background              #1a2137
foreground              #e7ebf6
selection_background    #e7ebf6
selection_foreground    #1a2137

# Cursor colors
cursor_text_color       #e7ebf6
cursor                  #bcc6e3

# URL underline color when hovering with mouse
url_color               #b39540

# Kitty window border colors
active_border_color     #bcc6e3
inactive_border_color   #586899
bell_border_color       #cc5d4d

# Tab bar colors
active_tab_foreground   #e7ebf6
active_tab_background   #1a2137
inactive_tab_foreground #2e3859
inactive_tab_background #bcc6e3
tab_bar_background      #1a2137

# Colors for marks (marked text in the terminal)
mark1_foreground #e7ebf6
mark1_background #e07565
mark2_foreground #e7ebf6
mark2_background #b39540
mark3_foreground #e7ebf6
mark3_background #5bae6f

# The 16 terminal colors

# black
color0 #3F4451
color8 #4F5666

# red
color1 #E06C75
color9 #FF7B86

# green
color2  #4d975f
color10 #5bae6f

# yellow
color3  #D19A66
color11 #EFB074

# blue
color4  #5499D1
color12 #61AFEF

# magenta
color5  #C678DD
color13 #E48BFF

# cyan
color6  #56B6C2
color14 #63D4E0

# white
color7  #bcc6e3
color15 #f5f6fb

background_opacity 0.90

#: The opacity of the background. A number between zero and one, where
#: one is opaque and zero is fully transparent. This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the background color's opacity in
#: cells that have the same background color as the default terminal
#: background, so that things like the status bar in vim, powerline
#: prompts, etc. still look good. But it means that if you use a color
#: theme with a background color in your editor, it will not be
#: rendered as transparent. Instead you should change the default
#: background color in your kitty config and not use a background
#: color in the editor color scheme. Or use the escape codes to set
#: the terminals default colors in a shell script to launch your
#: editor. See also transparent_background_colors. Be aware that using
#: a value less than 1.0 is a (possibly significant) performance hit.
#: When using a low value for this setting, it is desirable that you
#: set the background color to a color the matches the general color
#: of the desktop background, for best text rendering.  If you want to
#: dynamically change transparency of windows, set
#: dynamic_background_opacity to yes (this is off by default as it has
#: a performance cost). Changing this option when reloading the config
#: will only work if dynamic_background_opacity was enabled in the
#: original config.

# background_blur 64

#: Set to a positive value to enable background blur (blurring of the
#: visuals behind a transparent window) on platforms that support it.
#: Only takes effect when background_opacity is less than one. On
#: macOS, this will also control the blur radius (amount of blurring).
#: Setting it to too high a value will cause severe performance issues
#: and/or rendering artifacts. Usually, values up to 64 work well.
#: Note that this might cause performance issues, depending on how the
#: platform implements it, so use with care. Currently supported on
#: macOS and KDE.

# dynamic_background_opacity no

#: Allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.
#: Changing this option by reloading the config is not supported.

background_tint 0.5

#: How much to tint the background image by the background color. This
#: option makes it easier to read the text. Tinting is done using the
#: current background color for each window. This option applies only
#: if background_opacity is set and transparent windows are supported
#: or background_image is set.

background_tint_gaps 1.0

#: How much to tint the background image at the window gaps by the
#: background color, after applying background_tint. Since this is
#: multiplicative with background_tint, it can be used to lighten the
#: tint over the window gaps for a *separated* look.

# dim_opacity 0.4

#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).


#: Fonts -------------------------------------------------------------


#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

font_family      "MesloLGS NF"
bold_font        "MesloLGS NF Bold"
italic_font      "MesloLGS NF Italic"
bold_italic_font "MesloLGS NF Bold Italic"

#: You can specify different fonts for the bold/italic/bold-italic
#: variants. The easiest way to select fonts is to run the `kitten
#: choose-fonts` command which will present a nice UI for you to
#: select the fonts you want with previews and support for selecting
#: variable fonts and font features. If you want to learn to select
#: fonts manually, read the font specification syntax
#: <https://sw.kovidgoyal.net/kitty/kittens/choose-fonts/#font-spec-
#: syntax>.

# font_size 11.0

# wheel_scroll_multiplier 5.0

#: Multiplier for the number of lines scrolled by the mouse wheel.
#: Note that this is only used for low precision scrolling devices,
#: not for high precision scrolling devices on platforms such as macOS
#: and Wayland. Use negative numbers to change scroll direction. See
#: also wheel_scroll_min_lines.

# wheel_scroll_min_lines 1

#: The minimum number of lines scrolled by the mouse wheel. The scroll
#: multiplier wheel_scroll_multiplier only takes effect after it
#: reaches this number. Note that this is only used for low precision
#: scrolling devices like wheel mice that scroll by very small amounts
#: when using the wheel. With a negative number, the minimum number of
#: lines will always be added.


#: -------------------------------------------------------------------


#: Tab bar {{{

tab_bar_edge bottom

#: The edge to show the tab bar on, top or bottom.

# tab_bar_margin_width 0.0

#: The margin to the left and right of the tab bar (in pts).

# tab_bar_margin_height 0.0 0.0

#: The margin above and below the tab bar (in pts). The first number
#: is the margin between the edge of the OS Window and the tab bar.
#: The second number is the margin between the tab bar and the
#: contents of the current tab.

tab_bar_style powerline
#: The tab bar style, can be one of:

#: fade
#:     Each tab's edges fade into the background color. (See also tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file.
#: separator
#:     Tabs are separated by a configurable separator. (See also
#:     tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators.
#:     (See also tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also
#:     this discussion <https://github.com/kovidgoyal/kitty/discussions/4447>
#:     for examples from kitty users.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create
#:     a mapping for the select_tab action which presents you with a list of
#:     tabs and allows for easy switching to a tab.

tab_powerline_style slanted

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, round.

# tab_bar_align left

#: The horizontal alignment of the tab bar, can be one of: left,
#: center, right.

# tab_bar_min_tabs 2

#: The minimum number of tabs that must exist before the tab bar is
#: shown.

#: tab_fade 0.25 0.5 0.75 1

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

# tab_activity_symbol none

#: Some text or a Unicode symbol to show on the tab if a window in the
#: tab that does not have focus has some activity. If you want to use
#: leading or trailing spaces, surround the text with quotes. See
#: tab_title_template for how this is rendered.

# tab_title_max_length 0

#: The maximum number of cells that can be used to render the text in
#: a tab. A value of zero means that no limit is applied.

# tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{title}"

#: A template to render the tab title. The default just renders the
#: title with optional symbols for bell and activity. If you wish to
#: include the tab-index as well, use something like: {index}:{title}.
#: Useful if you have shortcuts mapped for goto_tab N. If you prefer
#: to see the index as a superscript, use {sup.index}. All data
#: available is:

#: title
#:     The current tab title.
#: index
#:     The tab index usable with goto_tab N goto_tab shortcuts.
#: layout_name
#:     The current layout name.
#: num_windows
#:     The number of windows in the tab.
#: num_window_groups
#:     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
#: tab.active_wd
#:     The working directory of the currently active window in the tab
#:     (expensive, requires syscall). Use active_oldest_wd to get
#:     the directory of the oldest foreground process rather than the newest.
#: tab.active_exe
#:     The name of the executable running in the foreground of the currently
#:     active window in the tab (expensive, requires syscall). Use
#:     active_oldest_exe for the oldest foreground process.
#: max_title_length
#:     The maximum title length available.
#: keyboard_mode
#:     The name of the current keyboard mode <https://sw.kovidgoyal.net/kitty/mapping/#modal-mappings> or the empty string if no keyboard mode is active.

#: active_tab_title_template none

#: Template to use for active tabs. If not specified falls back to
#: tab_title_template.

# active_tab_foreground   #000
# active_tab_background   #eee
active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
inactive_tab_font_style normal

#: Tab bar colors and styles.


#: --------------------------------------------------------------------


#: Keyboard shortcuts {{{

#: Keys are identified simply by their lowercase Unicode characters.
#: For example: a for the A key, [ for the left square bracket key,
#: etc. For functional keys, such as Enter or Escape, the names are
#: present at Functional key definitions
#: <https://sw.kovidgoyal.net/kitty/keyboard-protocol/#functional>.
#: For modifier keys, the names are ctrl (control, ⌃), shift (⇧), alt
#: (opt, option, ⌥), super (cmd, command, ⌘).

#: Simple shortcut mapping is done with the map directive. For full
#: details on advanced mapping including modal and per application
#: maps, see mapping <https://sw.kovidgoyal.net/kitty/mapping/>. Some
#: quick examples to illustrate common tasks::

#:     # unmap a keyboard shortcut, passing it to the program running in kitty
#:     map kitty_mod+space
#:     # completely ignore a keyboard event
#:     map ctrl+alt+f1 discard_event
#:     # combine multiple actions
#:     map kitty_mod+e combine : new_window : next_layout
#:     # multi-key shortcuts
#:     map ctrl+x>ctrl+y>z action

#: The full list of actions that can be mapped to key presses is
#: available here <https://sw.kovidgoyal.net/kitty/actions/>.

kitty_mod ctrl+shift

#: Special modifier key alias for default shortcuts. You can change
#: the value of this option to alter all default shortcuts that use
#: kitty_mod.

#: Copy to clipboard

map kitty_mod+c copy_to_clipboard

#: Paste from clipboard

map kitty_mod+v paste_from_clipboard


#: -------------------------------------------------------------------
#: Window management

#: New OS window
map kitty_mod+n new_os_window

#: New tile
map kitty_mod+enter new_window

#::  New OS window with directory set to the working directory of the current window::
map kitty_mod+alt+enter new_os_window_with_cwd

#::  New tile with directory set to the working directory of the current window::
map ctrl+alt+enter launch --cwd=current

#::  You can open a new kitty window running an arbitrary program, for
#::  example::
#::      map kitty_mod+y launch mutt

#: Close window
map kitty_mod+w close_window

#: Next tab?
#map kitty_mod+\x1b[C next_window # right arrow key

#: Previous tab?
#map kitty_mod+\x1b[D previous_window # left arrow key


#: First window
map kitty_mod+1 first_window

#: Second window
# map kitty_mod+2 second_window
map cmd+2       second_window

#: Third window
map kitty_mod+3 third_window

#: Fourth window
map kitty_mod+4 fourth_window

#: Fifth window
map kitty_mod+5 fifth_window

#: Sixth window
map kitty_mod+6 sixth_window

#: Seventh window
map kitty_mod+7 seventh_window

#: Eighth window
map kitty_mod+8 eighth_window

#: Ninth window
map kitty_mod+9 ninth_window

#: Tenth window
map kitty_mod+0 tenth_window

#: }}}

#: Tab management {{{

#: Next tab
map kitty_mod+right next_tab


#: Previous tab

# map kitty_mod+left previous_tab
# map shift+cmd+[    previous_tab
# map ctrl+shift+tab previous_tab

#: New tab
map kitty_mod+t new_tab

#: Close tab
map kitty_mod+q close_tab

#: Close OS window
# map shift+cmd+w close_os_window

#: Set tab title
map kitty_mod+alt+t set_tab_title


#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, -2 being the tab active before the previously active tab and
#: so on. Any number larger than the number of tabs goes to the last
#: tab and any number less than the number of previously used tabs in
#: the history goes to the oldest previously used tab in the history::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Layout management {{{

#: Next layout

# map kitty_mod+l next_layout


#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:     map ctrl+alt+p last_used_layout

#: There is also a toggle_layout action that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack
#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

#: Increase font size

# map kitty_mod+equal  change_font_size all +2.0
map kitty_mod+plus   change_font_size all +0.5

#: Decrease font size
map kitty_mod+minus       change_font_size all -1.0

#: Reset font size
map kitty_mod+backspace change_font_size all 0


#: ---------------------------------------------------------------------
#: Miscellaneous


#: Toggle fullscreen
map kitty_mod+f11 toggle_fullscreen


#: Edit config file
map kitty_mod+f2 edit_config_file

#: Open the kitty command shell ----- THIS OPENS SYSTEM MONITOR
map kitty_mod+escape kitty_shell window

#: Reset the terminal
map kitty_mod+delete clear_terminal reset active
