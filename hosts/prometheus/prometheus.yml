services:
  caddy:
    build: .
    image: caddy-cloudflare:latest
    container_name: caddy-prometheus
    security_opt:
      - label:disable
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      PUID: ${UID}
      PGID: ${GID}
    volumes:
      - ${CADDYFILE_PATH}:/etc/caddy/Caddyfile
      - ./caddy/data:/data
      - ./caddy/config:/config
    ports:
      - 80:80
      - 443:443
      - 2019:2019 # admin endpoint
    env_file:
      - prometheus.env
    networks:
      - caddy_public_net # public-facing network
      - caddy_authentik_net # network connecting caddy to the authentik server ONLY

  postgresql:
    image: docker.io/library/postgres:${POSTGRES_VERSION} # https://hub.docker.com/_/postgres
    container_name: authentik-postgres
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      PUID: ${UID}
      PGID: ${GID}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?database password required}
      POSTGRES_USER: ${POSTGRES_USER:-authentik}
      POSTGRES_DB: ${POSTGRES_DB:-authentik}
    volumes:
      - ./authentik/postgresql:/var/lib/postgresql/data
    env_file:
      - prometheus.env
    networks:
      - authentik_private_net

  redis:
    image: docker.io/library/redis:alpine
    container_name: authentik-redis
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      PUID: ${UID}
      PGID: ${GID}
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ./authentik/redis:/data
    env_file:
      - prometheus.env
    networks:
      - authentik_private_net

  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.8.3}
    container_name: authentik-server
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    depends_on:
      - postgresql
      - redis
    command: server
    environment:
      PUID: ${UID}
      PGID: ${GID}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./authentik/server/media:/media
      - ./authentik/server/custom-templates:/templates
    ports:
      - "${AUTHENTIK_PORT_HTTP:-9000}:9000"
      - "${AUTHENTIK_PORT_HTTPS:-9443}:9443"
    env_file:
      - prometheus.env
    networks:
      - caddy_authentik_net
      - authentik_private_net

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.8.3}
    container_name: authentik-worker
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    depends_on:
      - postgresql
      - redis
    command: worker
    environment:
      PUID: ${UID}
      PGID: ${GID}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    volumes:
      - ./authentik/worker/media:/media
      - ./authentik/worker/certs:/certs
      - ./authentik/worker/custom-templates:/templates
    env_file:
      - prometheus.env
    networks:
      - authentik_private_net

networks:
  caddy_public_net:
    driver: bridge
  caddy_authentik_net:
    driver: bridge
  authentik_private_net:
    driver: bridge
