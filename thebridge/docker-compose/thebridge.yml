services:
  homepage:
    image: ghcr.io/gethomepage/homepage:${HOMEPAGE_VERSION}
    container_name: homepage
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Etc/UTC
    volumes:
      - homepage_config:/app/config # Make sure your local config directory exists
      - homepage_images:/app/public/images
      #- /var/run/docker.sock:/var/run/docker.sock:ro # optional, for docker integrations. USE SOCKET PROXY INSTEAD: https://github.com/Tecnativa/docker-socket-proxy
    ports:
      - 3000:3000

  speedtest-tracker:
    image: lscr.io/linuxserver/speedtest-tracker:${SPEEDTEST_TRACKER_VERSION}
    container_name: speedtest-tracker
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Etc/UTC
      - APP_KEY=${SPEEDTEST_APP_KEY} # How to generate an app key: https://speedtest-tracker.dev/
      - DB_CONNECTION=pgsql # postgres
      - SPEEDTEST_SCHEDULE="0 */6 * * *" # cron format, set to run at minute 0 past every 6th hour
      - SPEEDTEST_SERVERS=8839 # Find with: docker exec speedtest-tracker php /app/www/artisan app:ookla-list-servers
      - DB_HOST=${POSTGRES_DB_HOST} #optional
      - DB_PORT=5432 #optional
      - DB_DATABASE=${POSTGRES_DATABASE_NAME} #optional
      - DB_USERNAME=${POSTGRES_USER} #optional
      - DB_PASSWORD=${POSTGRES_PASSWORD} #optional
      - PRUNE_RESULTS_OLDER_THAN=365 #optional, days to keep test results
      #- APP_DEBUG=true
    volumes:
      - speedtest-tracker_config:/config
      - speedtest-tracker_keys:/config/keys
    ports:
      - 8080:80 # web UI
      - 8443:443

  postgres-db:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres-db
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Etc/UTC
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - 5432:5432

  homeassistant:
    image: homeassistant/home-assistant:${HOMEASSISTANT_VERSION}
    container_name: homeassistant
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=Etc/UTC
    volumes:
      - homeassistant_config:/config
    ports:
      - 8123:8123

  uptime-kuma:
    image: louislam/uptime-kuma:${UPTIME_KUMA_VERSION}
    container_name: uptime-kuma
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PUID}
      - TZ=Etc/UTC
    volumes:
      - uptime-kuma_data:/data
    ports:
      - 3001:3001 # <Host/External Port>:<Container/Internal Port>

  ntfy:
    image: binwiederhier/ntfy:${NTFY_VERSION}
    container_name: ntfy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    command:
      - serve
    healthcheck: # optional: remember to adapt the host:port to your environment
      test:
        [
          'CMD-SHELL',
          "wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1",
        ]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      PUID: ${PUID}
      PGID: ${PUID}
      TZ: Etc/UTC
    volumes:
      - ntfy_cache:/var/cache/ntfy
      - ntfy_data:/etc/ntfy
    ports:
      - 8000:80

  #prometheus:
  #image: prom/prometheus:latest
  #container_name: prometheus
  #security_opt:
  #- no-new-privileges:true
  #restart: unless-stopped
  #environment:
  #- PUID=3000
  #- PGID=3000
  #- TZ=Etc/UTC
  #volumes:
  #- ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml #must manually create?
  #- prometheus_data:/prometheus
  #ports:
  #- 9090:9090

  #grafana:
  #image: grafana/grafana-oss:latest
  #container_name: grafana
  #security_opt:
  #- no-new-privileges:true
  #restart: unless-stopped
  #environment:
  #- PUID=3000
  #- PGID=3000
  #- TZ=Etc/UTC
  #- GF_SERVER_ROOT_URL=http://my.grafana.server/
  #- GF_INSTALL_PLUGINS=grafana-clock-panel #installs official clock plugin
  #volumes:
  #- grafana_data:/var/lib/grafana
  #ports:
  #- 3002:3000 # <Host/External Port>:<Container/Internal Port>

  #influxdb:
  #image: influxdb:latest  # You can specify a specific version, like influxdb:2.7
  #container_name: influxdb
  #security_opt:
  #- no-new-privileges:true
  #restart: unless-stopped
  #environment:
  #- PUID=3000
  #- PGID=3000
  #- TZ=Etc/UTC
  #- INFLUXDB_ADMIN_USER=admin  # Admin user for InfluxDB
  #- INFLUXDB_ADMIN_PASSWORD=adminpassword  # Admin password
  #- INFLUXDB_BUCKET=mybucket  # Default bucket
  #- INFLUXDB_ORG=myorg  # Default organization
  #- INFLUXDB_TOKEN=mytoken  # Authentication token
  #volumes:
  #- influxdb_data:/var/lib/influxdb2  # Persistent storage for InfluxDB
  #ports:
  #- 8086:8086  # InfluxDB's default port

  #apprise-api:
  #image: lscr.io/linuxserver/apprise-api:latest
  #container_name: apprise-api
  #security_opt:
  #- no-new-privileges:true
  #restart: unless-stopped
  #environment:
  #- PUID=3000
  #- PGID=3000
  #- TZ=Etc/UTC
  #- APPRISE_ATTACH_SIZE=128 # optional, max attachment size in Mb. 0 disables attachments.
  #volumes:
  #- apprise_config:/config
  #- apprise_attachments:/attachments # optional
  #ports:
  #- 8888:8000

volumes:
  homepage_config:
  homepage_images:
  speedtest-tracker_config:
  speedtest-tracker_keys:
  postgres-data:
  homeassistant_config:
  uptime-kuma_data:
  ntfy_cache:
  ntfy_data:
  #prometheus_data:
  #grafana_data:
  #influxdb_data:
  #apprise_config:
  #apprise_attachments:
